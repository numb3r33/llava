"""Utility functions for configuration loading, logging setup, etc."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_utils.ipynb.

# %% auto 0
__all__ = ['load_config', 'init_wandb']

# %% ../nbs/01_utils.ipynb 3
import yaml
from pathlib import Path
from fastcore.utils import *
import wandb
import os
import datetime

# %% ../nbs/01_utils.ipynb 5
def load_config(config_path: str|Path):
    """Loads configuration settings from a YAML file.

    Args:
        config_path: Path to the YAML configuration file.

    Returns:
        A dictionary containing the configuration settings.

    Raises:
        FileNotFoundError: If the config file doesn't exist.
        yaml.YAMLError: If there's an error parsing the YAML file.
    """
    config_path = Path(config_path)
    if not config_path.is_file():
        raise FileNotFoundError(f"Configuration file not found at {config_path}")
    try:
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        return config
    except yaml.YAMLError as e:
        print(f"Error parsing YAML file: {config_path}")
        raise e

# %% ../nbs/01_utils.ipynb 10
def init_wandb(config: dict, job_type: str = "training", run_name: str | None = None):
    """Initializes a Weights & Biases run.

    Args:
        config: The configuration dictionary, expected to have a 'logging.wandb' section.
        job_type: Type of the job (e.g., 'training', 'evaluation').
        run_name: Optional name for the run. Defaults to a timestamped name.

    Returns:
        The initialized wandb run object, or None if W&B is disabled.

    Notes:
        Requires WANDB_API_KEY environment variable or prior `wandb login`.
        Reads 'project' and 'entity' from config['logging']['wandb'].
    """
    wandb_config = config.get('logging', {}).get('wandb', {})
    if not wandb_config.get('enabled', False):
        print("W&B logging is disabled in the configuration.")
        return None

    project = wandb_config.get('project', 'default_project')
    entity = wandb_config.get('entity') # Can be None, W&B will use default

    if run_name is None:
        run_name = f"{job_type}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"

    try:
        run = wandb.init(
            project=project,
            entity=entity,
            config=config, # Log the entire config
            name=run_name,
            job_type=job_type,
            reinit=True # Allows re-initialization in notebooks
        )
        print(f"W&B run initialized: {run.name} (Project: {project}, Entity: {entity or 'default'})")
        print(f"Track run at: {run.url}")
        return run
    except Exception as e:
        print(f"Error initializing W&B: {e}")
        print("Ensure WANDB_API_KEY is set or you are logged in (`wandb login`).")
        return None
